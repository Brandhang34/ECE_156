#include <iostream>
#include <vector>
#include <string>

using namespace std;

const int Z26 = 26;

vector<int> permutation = {
  23, 13, 24, 0, 7, 15, 14, 6, 25, 16, 22, 1, 19, 18, 5, 11, 17, 2, 21, 12, 20, 4, 10, 9, 3, 8
};

/* vector<int> inversePermutation(Z26); */
int inversePermutation[Z26];

void initInversePermutation() {
  for (int i = 0; i < Z26; ++i) {
    inversePermutation[permutation[i]] = i;
	cout << inversePermutation[i] << " ";
  }
  cout << endl;
}

int modulo26(int x) {
	if (x >= 0){
		return x % Z26;
	}
	else{
		return Z26 - (-x % Z26);
	}
}

int decrypt(int y, int z) {
  return modulo26(inversePermutation[modulo26(y - z)]);
}

int main() {
  // initialize the permutation of pi over z26. 
  initInversePermutation();

  // Cipher text is = WRTCNRLDSAFARWKXFTXCZRNHNY PDTZUUKMPLUSOXNEUDOKLXRMCBKGRCCURR. 
  // The vector below is the cipher text characters in number form where a=0, b=1 ...
  vector<int> ciphertext = {22, 17, 19, 2, 13, 17, 11, 3, 18, 0, 5, 0, 17, 22, 10, 23, 5, 19, 23, 2, 25, 17, 13, 7, 13, 24, 15, 3, 19, 25, 20, 20, 10, 12, 15, 11, 20, 18, 14, 23, 13, 4, 20, 3, 14, 10, 11, 23, 17, 12, 2, 1, 10, 6, 17, 2, 2, 20, 17, 17};

  for (int key = 0; key < Z26; ++key) {
    vector<int> plaintext(ciphertext.size());
    for (int i = 0; i < ciphertext.size(); ++i) {
      plaintext[i] = decrypt(ciphertext[i], modulo26(key + i - 1));
    }

    cout << "Key: " << key << endl;
    cout << "Plaintext: ";
    for (int i = 0; i < plaintext.size(); ++i) {
	  // Numerical value to a character 
      cout << static_cast<char>('A' + plaintext[i]);
    }
    cout << endl << endl;

    string userInput;
    cout << "Is this the correct plaintext('e' to exit or anything else to cont.)? ";
    cin >> userInput;

    if (userInput == "e") {
      break;
    }
  }

  return 0;
}
